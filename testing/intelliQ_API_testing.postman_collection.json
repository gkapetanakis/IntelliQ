{
	"info": {
		"_postman_id": "315c5f5e-7d30-46cd-8418-c2a8e5b55b77",
		"name": "intelliQ API Testing",
		"description": "Create and answer questionnaires",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24937825"
	},
	"item": [
		{
			"name": "admin",
			"item": [
				{
					"name": "Healthcheck",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// STATUS CODE",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// BODY",
									"pm.test(\"Success/Error: Body is not empty\", () => {",
									"    pm.expect(pm.response.text()).to.not.be.empty;",
									"",
									"    // nested test only runs if parent test succeeds",
									"    pm.test(\"Success/Error: Body is correct\", () => {",
									"        pm.expect(pm.response.json().status).to.be.oneOf([\"OK\", \"failed\"]);",
									"        pm.expect(typeof pm.response.json().dbconnection).to.be.string;",
									"",
									"        // the following statement will only be executed if all previous assertions succeed",
									"",
									"        // if the db is offline, assume it will be offline for the entire test run",
									"        pm.variables.set(\"dbAvailable\", pm.response.json().status === \"OK\");",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"postman.setNextRequest(\"Reset All\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{baseUrl}}/admin/healthcheck",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"healthcheck"
							]
						},
						"description": "Check the status of the connection to the database"
					},
					"response": [
						{
							"name": "The health and the URL of the database connection",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/admin/healthcheck",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"healthcheck"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"status\": \"<string>\",\n  \"dbconnection\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Upload Questionnaire",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const dbAvailable = pm.variables.get(\"dbAvailable\");",
									"const validRequest = pm.variables.get(\"validRequest\");",
									"const filename = pm.variables.get(\"filename\");",
									"pm.variables.unset(\"validRequest\");",
									"pm.variables.unset(\"filename\");",
									"",
									"// STATUS CODE",
									"pm.test(`Status code is 204, 400 or 500 (${filename})`, () => {",
									"    if (!filename)",
									"        // if no file is given, \"Bad Request\" is always returned",
									"        pm.response.to.have.status(400);",
									"    else",
									"        // validation is not done when db is offline",
									"        pm.response.to.have.status(dbAvailable ? (validRequest ? 204 : 400) : 500);",
									"});",
									"",
									"// BODY",
									"if (dbAvailable && validRequest) {",
									"    // if the request is successful, the response body should be empty",
									"    pm.test(\"Success: Body is empty\", () => {",
									"        pm.expect(pm.response.text()).to.be.empty;",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const dbAvailable = pm.variables.get(\"dbAvailable\");",
									"const initialized = pm.variables.get(\"initialized\");",
									"if (!initialized) {",
									"    // only cases with the \"SUC\" element should succeed",
									"    pm.variables.set(\"filenames\", [",
									"        [\"valid-1.json\", \"SUC\"],",
									"        [\"valid-2.json\", \"SUC\"],",
									"        [\"valid-2.json\"],",
									"        [\"invalid-1-duplicate-qID.json\"],",
									"        [\"invalid-2-duplicate-optID.json\"],",
									"        [\"invalid-3-missing-fields.json\"],",
									"        [\"invalid-4-no-questionnaireID.json\"],",
									"        [\"invalid-5-no-questionnaireTitle.json\"],",
									"        [\"invalid-6-no-questions.json\"],",
									"        [\"invalid-7-no-qtext.json\"],",
									"        [\"invalid-8-wrong-required.json\"],",
									"        [\"invalid-9-wrong-type.json\"],",
									"        [\"invalid-10-no-options.json\"],",
									"        [\"invalid-11-no-opttxt.json\"],",
									"        [\"invalid-12-prev-nextqID.json\"],",
									"        [\"invalid-13-open-string-multiple-options.json\"],",
									"        [\"\", \"FIN\"]",
									"    ]);",
									"",
									"    pm.variables.set(\"initialized\", true);",
									"}",
									"",
									"const current = pm.variables.get(\"filenames\").shift();",
									"pm.variables.set(\"filename\", current[0]);",
									"pm.request.body.formdata.members[0].src = current[0];",
									"",
									"if (current.at(-1) !== \"FIN\") {",
									"    postman.setNextRequest(\"Upload Questionnaire\");",
									"}",
									"else {",
									"    pm.variables.unset(\"initialized\");",
									"    pm.variables.unset(\"filenames\");",
									"    postman.setNextRequest(\"Do Answer\");",
									"}",
									"",
									"pm.variables.set(\"validRequest\", current.at(-1) === \"SUC\");",
									"pm.variables.set(\"runDefaultErrorTest\", !(dbAvailable && pm.variables.get(\"validRequest\")));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "valid-1.json"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/admin/questionnaire_upd",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"questionnaire_upd"
							]
						},
						"description": "Upload a new questionnaire written as a JSON in a file (as multipart/form-data)"
					},
					"response": [
						{
							"name": "No Content",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"value": "<binary>",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/admin/questionnaire_upd",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"questionnaire_upd"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"value": "<binary>",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/admin/questionnaire_upd",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"questionnaire_upd"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Internal Server Error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"value": "<binary>",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/admin/questionnaire_upd",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"questionnaire_upd"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Reset Questionnaire",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const dbAvailable = pm.variables.get(\"dbAvailable\");",
									"const shouldSucceed = pm.variables.get(\"shouldSucceed\");",
									"pm.variables.unset(\"shouldSucceed\");",
									"",
									"// STATUS CODE",
									"pm.test(\"Status code is 200, 400 or 500\", () => {",
									"    pm.response.to.have.status(dbAvailable ? (shouldSucceed ? 200 : 400) : 500);",
									"});",
									"",
									"// BODY",
									"pm.test(\"Success/Error: Body is not empty\", () => {",
									"    pm.expect(pm.response.text()).to.not.be.empty;",
									"",
									"    pm.test(\"Success/Error: Body is correct\", () => {",
									"        const responseJson = pm.response.json();",
									"        pm.expect(responseJson.status).to.equal(dbAvailable && shouldSucceed ? \"OK\" : \"failed\");",
									"        pm.expect(typeof responseJson.reason).to.equal(dbAvailable && shouldSucceed ? \"undefined\" : \"string\");",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const initialized = pm.variables.get(\"initialized\");",
									"if (!initialized) {",
									"    pm.variables.set(\"parameters\", [",
									"        [\"QQ000\", \"SUC\"], // valid",
									"        [\"INV00\", \"FIN\"] // invalid",
									"    ]);",
									"",
									"    pm.variables.set(\"initialized\", true);",
									"}",
									"",
									"const current = pm.variables.get(\"parameters\").shift();",
									"pm.variables.set(\"questionnaireID\", current[0]);",
									"",
									"if (current.at(-1) !== \"FIN\") {",
									"    postman.setNextRequest(\"Reset Questionnaire\");",
									"}",
									"else {",
									"    pm.variables.unset(\"initialized\");",
									"    pm.variables.unset(\"parameters\");",
									"    postman.setNextRequest(null);",
									"}",
									"",
									"pm.variables.set(\"shouldSucceed\", current.at(-1) === \"SUC\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/admin/resetq/:questionnaireID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"resetq",
								":questionnaireID"
							],
							"variable": [
								{
									"key": "questionnaireID",
									"value": "{{questionnaireID}}",
									"description": "(Required) "
								}
							]
						},
						"description": "Purge all sessions of the give questionnaire from the database"
					},
					"response": [
						{
							"name": "The status of the request and (if needed) the reason of its failure",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/admin/resetq/:questionnaireID",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"resetq",
										":questionnaireID"
									],
									"variable": [
										{
											"key": "questionnaireID",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"status\": \"<string>\"\n}"
						},
						{
							"name": "The status of the request and (if needed) the reason of its failure",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/admin/resetq/:questionnaireID",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"resetq",
										":questionnaireID"
									],
									"variable": [
										{
											"key": "questionnaireID",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"status\": \"<string>\",\n  \"reason\": \"<string>\"\n}"
						},
						{
							"name": "The status of the request and (if needed) the reason of its failure",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/admin/resetq/:questionnaireID",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"resetq",
										":questionnaireID"
									],
									"variable": [
										{
											"key": "questionnaireID",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"status\": \"<string>\",\n  \"reason\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Reset All",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const dbAvailable = pm.variables.get(\"dbAvailable\");",
									"",
									"// STATUS CODE",
									"pm.test(\"Status code is 200 or 500\", () => {",
									"    pm.response.to.have.status(dbAvailable ? 200 : 500);",
									"});",
									"",
									"// BODY",
									"pm.test(\"Success/Error: Body is not empty\", () => {",
									"    pm.expect(pm.response.text()).to.not.be.empty;",
									"",
									"    pm.test(\"Success/Error: Body is correct\", () => {",
									"        const responseJson = pm.response.json();",
									"        pm.expect(responseJson.status).to.equal(dbAvailable ? \"OK\" : \"failed\");",
									"        pm.expect(typeof responseJson.reason).to.equal(dbAvailable ? \"undefined\" : \"string\");",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"postman.setNextRequest(\"Upload Questionnaire\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/admin/resetall",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"resetall"
							]
						},
						"description": "Purge the database"
					},
					"response": [
						{
							"name": "The status of the request and (if needed) the reason of its failure",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/admin/resetall",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"resetall"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"status\": \"<string>\"\n}"
						},
						{
							"name": "The status of the request and (if needed) the reason of its failure",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/admin/resetall",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"resetall"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"status\": \"<string>\",\n  \"reason\": \"<string>\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "Do Answer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const dbAvailable = pm.variables.get(\"dbAvailable\");",
							"const validRequest = pm.variables.get(\"validRequest\");",
							"const questionnaireID = pm.variables.get(\"questionnaireID\");",
							"const questionID = pm.variables.get(\"questionID\");",
							"const sessionID = pm.variables.get(\"sessionID\");",
							"const optionID = pm.variables.get(\"optionID\");",
							"pm.variables.unset(\"validRequest\");",
							"pm.variables.unset(\"questionnaireID\");",
							"pm.variables.unset(\"questionID\");",
							"pm.variables.unset(\"sessionID\");",
							"pm.variables.unset(\"optionID\");",
							"",
							"// STATUS CODE",
							"pm.test(`Status code is 204, 400 or 500 (${questionnaireID}, ${questionID}, ${sessionID}, ${optionID})`, () => {",
							"    pm.response.to.have.status(dbAvailable ? (validRequest ? 204 : 400) : 500);",
							"});",
							"",
							"// BODY",
							"if (dbAvailable && validRequest) {",
							"    pm.test(\"Success: Body is empty\", () => {",
							"        pm.expect(pm.response.text()).to.be.empty;",
							"    });",
							"}",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const dbAvailable = pm.variables.get(\"dbAvailable\");",
							"const initialized = pm.variables.get(\"initialized\");",
							"if (!initialized) {",
							"    pm.variables.set(\"parameters\", [",
							"        [\"QQ000\", \"P00\", \"SS00\", \"george@mail.com\", \"SUC\"], // all valid (open text)",
							"        [\"QQ000\", \"P01\", \"SS00\", \"P01A1\", \"SUC\"], // all valid (multiple choice)",
							"        [\"QQ000\", \"P00\", \"SS01\", \"george@mail.com\", \"SUC\"], // all same, different session (open text)",
							"        [\"QQ000\", \"P01\", \"SS01\", \"P01A1\", \"SUC\"], // all same, different session (multiple choice)",
							"        [\"QQ001\", \"P02\", \"SS00\", \"null\", \"SUC\"], // skipped skippable question (open text)",
							"        [\"QQ001\", \"Q06\", \"SS00\", \"null\", \"SUC\"], // skipped skippable question (multiple choice)",
							"        [\"QQ001\", \"P01\", \"SS01\", \"null\"], // skipped unskippable question (open text)",
							"        [\"QQ001\", \"Q03\", \"SS01\", \"null\"], // skipped unskippable question (multiple choice)",
							"        [\"QQ000\", \"P00\", \"SS00\", \"Answer\"], // duplicate answer (open text)",
							"        [\"QQ000\", \"P01\", \"SS00\", \"P01A1\"], // duplicate answer (multiple choice)",
							"        [\"QQ000\", \"P01\", \"SS01\", \"INVA1\"], // optID does not exist",
							"        [\"QQ000\", \"P01\", \"SSS00\", \"P01A1\"], // invalid sessionID length",
							"        [\"QQ000\", \"INV\", \"SS00\", \"INVA1\"], // question does not exist (nor option of course)",
							"        [\"INV00\", \"INV\", \"SS00\", \"INVA1\", \"FIN\"], // questionnaire does not exist",
							"    ]);",
							"",
							"    pm.variables.set(\"initialized\", true);",
							"}",
							"",
							"const current = pm.variables.get(\"parameters\").shift();",
							"pm.variables.set(\"questionnaireID\", current[0]);",
							"pm.variables.set(\"questionID\", current[1]);",
							"pm.variables.set(\"sessionID\", current[2]);",
							"pm.variables.set(\"optionID\", current[3]);",
							"",
							"if (current.at(-1) !== \"FIN\") {",
							"    postman.setNextRequest(\"Do Answer\");",
							"}",
							"else {",
							"    pm.variables.unset(\"initialized\");",
							"    pm.variables.unset(\"parameters\");",
							"    postman.setNextRequest(\"Get Questionnaire\");",
							"}",
							"",
							"pm.variables.set(\"validRequest\", current.at(-1) === \"SUC\");",
							"pm.variables.set(\"runDefaultErrorTest\", !(dbAvailable && pm.variables.get(\"validRequest\")));",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/doanswer/:questionnaireID/:questionID/:sessionID/:optionID",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"doanswer",
						":questionnaireID",
						":questionID",
						":sessionID",
						":optionID"
					],
					"variable": [
						{
							"key": "questionnaireID",
							"value": "{{questionnaireID}}",
							"description": "(Required) "
						},
						{
							"key": "questionID",
							"value": "{{questionID}}",
							"description": "(Required) "
						},
						{
							"key": "sessionID",
							"value": "{{sessionID}}",
							"description": "(Required) "
						},
						{
							"key": "optionID",
							"value": "{{optionID}}",
							"description": "(Required)"
						}
					]
				},
				"description": "Create a new answer to the given question of the given questionnaire for the given session"
			},
			"response": [
				{
					"name": "No Content",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/doanswer/:questionnaireID/:questionID/:sessionID/:optionID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"doanswer",
								":questionnaireID",
								":questionID",
								":sessionID",
								":optionID"
							],
							"variable": [
								{
									"key": "questionnaireID",
									"value": "<string>",
									"description": "(Required) "
								},
								{
									"key": "questionID",
									"value": "<string>",
									"description": "(Required) "
								},
								{
									"key": "sessionID",
									"value": "<string>",
									"description": "(Required) "
								},
								{
									"key": "optionID",
									"value": "<string>",
									"description": "(Required) "
								}
							]
						}
					},
					"status": "No Content",
					"code": 204,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Bad Request",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/doanswer/:questionnaireID/:questionID/:sessionID/:optionID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"doanswer",
								":questionnaireID",
								":questionID",
								":sessionID",
								":optionID"
							],
							"variable": [
								{
									"key": "questionnaireID",
									"value": "<string>",
									"description": "(Required) "
								},
								{
									"key": "questionID",
									"value": "<string>",
									"description": "(Required) "
								},
								{
									"key": "sessionID",
									"value": "<string>",
									"description": "(Required) "
								},
								{
									"key": "optionID",
									"value": "<string>",
									"description": "(Required) "
								}
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Internal Server Error",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/doanswer/:questionnaireID/:questionID/:sessionID/:optionID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"doanswer",
								":questionnaireID",
								":questionID",
								":sessionID",
								":optionID"
							],
							"variable": [
								{
									"key": "questionnaireID",
									"value": "<string>",
									"description": "(Required) "
								},
								{
									"key": "questionID",
									"value": "<string>",
									"description": "(Required) "
								},
								{
									"key": "sessionID",
									"value": "<string>",
									"description": "(Required) "
								},
								{
									"key": "optionID",
									"value": "<string>",
									"description": "(Required) "
								}
							]
						}
					},
					"status": "Internal Server Error",
					"code": 500,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Get Questionnaire",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const dbAvailable = pm.variables.get(\"dbAvailable\");",
							"const shouldSucceed = pm.variables.get(\"shouldSucceed\");",
							"const questionnaireID = pm.variables.get(\"questionnaireID\");",
							"pm.variables.unset(\"schema\");",
							"pm.variables.unset(\"shouldSucceed\");",
							"pm.variables.unset(\"questionnaireID\");",
							"pm.variables.unset(\"format\");",
							"",
							"// STATUS CODE",
							"pm.test(`Status code is 200, 404 or 500 (${questionnaireID})`, () => {",
							"    pm.response.to.have.status(dbAvailable ? (shouldSucceed ? 200 : 404) : 500);",
							"});",
							"",
							"// BODY is taken care of by collection test script",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const dbAvailable = pm.variables.get(\"dbAvailable\");",
							"const initialized = pm.variables.get(\"initialized\");",
							"if (!initialized) {",
							"    pm.variables.set(\"parameters\", [",
							"        [\"QQ000\", \"SUC\"], // exists",
							"        [\"IN000\", \"FIN\"], // does not exist",
							"    ]);",
							"",
							"    pm.variables.set(\"initialized\", true);",
							"}",
							"",
							"const current = pm.variables.get(\"parameters\").shift();",
							"pm.variables.set(\"questionnaireID\", current[0]);",
							"pm.variables.set(\"format\", \"json\");",
							"",
							"if (current.at(-1) !== \"FIN\") {",
							"    postman.setNextRequest(\"Get Questionnaire\");",
							"}",
							"else {",
							"    pm.variables.unset(\"initialized\");",
							"    pm.variables.unset(\"parameters\");",
							"    postman.setNextRequest(\"Get Question\");",
							"}",
							"",
							"pm.variables.set(\"shouldSucceed\", current.at(-1) === \"SUC\");",
							"pm.variables.set(\"validateSchema\", dbAvailable && pm.variables.get(\"shouldSucceed\"));",
							"pm.variables.set(\"runDefaultErrorTest\", !(dbAvailable && pm.variables.get(\"shouldSucceed\")));",
							"pm.variables.set(\"schema\", {",
							"    \"type\": \"object\",",
							"    \"required\": {",
							"        \"questionnaireID\": true,",
							"        \"keywords\": true,",
							"        \"questions\": true",
							"    },",
							"    \"properties\": {",
							"        \"questionnaireID\": { \"type\": \"string\" },",
							"        \"questionnaireTitle\": { \"type\": \"string\" },",
							"        \"keywords\": {",
							"            \"type\": \"array\",",
							"            \"items\": {",
							"                \"type\": \"string\"",
							"            }",
							"        },",
							"        \"questions\": {",
							"            \"type\": \"array\",",
							"            \"items\": {",
							"                \"type\": \"object\",",
							"                \"required\": {",
							"                    \"qID\": true,",
							"                    \"qtext\": true,",
							"                    \"required\": true,",
							"                    \"type\": true",
							"                },",
							"                \"properties\": {",
							"                    \"qID\": { \"type\": \"string\" },",
							"                    \"qtext\": { \"type\": \"string\" },",
							"                    \"required\": { \"type\": \"string\" },",
							"                    \"type\": { \"type\": \"string\" }",
							"                }",
							"            }",
							"        }",
							"    }",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/questionnaire/:questionnaireID?format={{format}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"questionnaire",
						":questionnaireID"
					],
					"query": [
						{
							"key": "format",
							"value": "{{format}}"
						}
					],
					"variable": [
						{
							"key": "questionnaireID",
							"value": "{{questionnaireID}}",
							"description": "(Required) "
						}
					]
				},
				"description": "Get a questionnaire from the database (excluding the question options)"
			},
			"response": [
				{
					"name": "OK",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/questionnaire/:questionnaireID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"questionnaire",
								":questionnaireID"
							],
							"variable": [
								{
									"key": "questionnaireID",
									"value": "<string>",
									"description": "(Required) "
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"questionnaireID\": \"<string>\",\n  \"questionnaireTitle\": \"<string>\",\n  \"keywords\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"questions\": [\n    {\n      \"qID\": \"<string>\",\n      \"qtext\": \"<string>\",\n      \"required\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"qID\": \"<string>\",\n      \"qtext\": \"<string>\",\n      \"required\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
				},
				{
					"name": "Bad Request",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/questionnaire/:questionnaireID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"questionnaire",
								":questionnaireID"
							],
							"variable": [
								{
									"key": "questionnaireID",
									"value": "<string>",
									"description": "(Required) "
								}
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Not Found",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/questionnaire/:questionnaireID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"questionnaire",
								":questionnaireID"
							],
							"variable": [
								{
									"key": "questionnaireID",
									"value": "<string>",
									"description": "(Required) "
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Internal Server Error",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/questionnaire/:questionnaireID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"questionnaire",
								":questionnaireID"
							],
							"variable": [
								{
									"key": "questionnaireID",
									"value": "<string>",
									"description": "(Required) "
								}
							]
						}
					},
					"status": "Internal Server Error",
					"code": 500,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Get Question",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const dbAvailable = pm.variables.get(\"dbAvailable\");",
							"const shouldSucceed = pm.variables.get(\"shouldSucceed\");",
							"const questionnaireID = pm.variables.get(\"questionnaireID\");",
							"const questionID = pm.variables.get(\"questionID\");",
							"pm.variables.unset(\"schema\");",
							"pm.variables.unset(\"shouldSucceed\");",
							"pm.variables.unset(\"questionnaireID\");",
							"pm.variables.unset(\"questionID\");",
							"pm.variables.unset(\"format\");",
							"",
							"// STATUS CODE",
							"pm.test(`Status code is 200, 404 or 500 (${questionnaireID}, ${questionID})`, () => {",
							"    pm.response.to.have.status(dbAvailable ? (shouldSucceed ? 200 : 404) : 500);",
							"});",
							"",
							"// BODY is taken care of by collection test script",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const dbAvailable = pm.variables.get(\"dbAvailable\");",
							"const initialized = pm.variables.get(\"initialized\");",
							"if (!initialized) {",
							"    pm.variables.set(\"parameters\", [",
							"        [\"QQ000\", \"P00\", \"SUC\"], // all exist",
							"        [\"QQ000\", \"INV\"], // question does not exist",
							"        [\"INV00\", \"INV\", \"FIN\"] // both do not exist",
							"    ]);",
							"",
							"    pm.variables.set(\"initialized\", true);",
							"}",
							"",
							"const current = pm.variables.get(\"parameters\").shift();",
							"pm.variables.set(\"questionnaireID\", current[0]);",
							"pm.variables.set(\"questionID\", current[1]);",
							"pm.variables.set(\"format\", \"json\");",
							"",
							"if (current.at(-1) !== \"FIN\") {",
							"    postman.setNextRequest(\"Get Question\");",
							"}",
							"else {",
							"    pm.variables.unset(\"initialized\");",
							"    pm.variables.unset(\"parameters\");",
							"    postman.setNextRequest(\"Get Session Answers\");",
							"}",
							"",
							"pm.variables.set(\"shouldSucceed\", current.at(-1) === \"SUC\");",
							"pm.variables.set(\"validateSchema\", dbAvailable && pm.variables.get(\"shouldSucceed\"));",
							"pm.variables.set(\"runDefaultErrorTest\", !(dbAvailable && pm.variables.get(\"shouldSucceed\")));",
							"pm.variables.set(\"schema\", {",
							"    \"type\": \"object\",",
							"    \"required\": {",
							"        \"questionnaireID\": true,",
							"        \"qID\": true,",
							"        \"qtext\": true,",
							"        \"required\": true,",
							"        \"type\": true,",
							"        \"options\": true",
							"    },",
							"    \"properties\": {",
							"        \"questionnaireID\": { \"type\": \"string\" },",
							"        \"qID\": { \"type\": \"string\" },",
							"        \"qtext\": { \"type\": \"string\" },",
							"        \"required\": { \"type\": \"string\" },",
							"        \"type\": { \"type\": \"string\" },",
							"        \"options\": {",
							"            \"type\": \"array\",",
							"            \"items\": {",
							"                \"type\": \"object\",",
							"                \"required\": {",
							"                    \"optID\": true,",
							"                    \"opttxt\": true,",
							"                    \"nextqID\": true",
							"                },",
							"                \"properties\": {",
							"                    \"optID\": { \"type\": \"string\" },",
							"                    \"opttxt\": { \"type\": \"string\" },",
							"                    \"nextqID\": { \"type\": \"string\" }",
							"                }",
							"            }",
							"        }",
							"    }",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/question/:questionnaireID/:questionID?format={{format}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"question",
						":questionnaireID",
						":questionID"
					],
					"query": [
						{
							"key": "format",
							"value": "{{format}}"
						}
					],
					"variable": [
						{
							"key": "questionnaireID",
							"value": "{{questionnaireID}}",
							"description": "(Required) "
						},
						{
							"key": "questionID",
							"value": "{{questionID}}",
							"description": "(Required) "
						}
					]
				},
				"description": "Get a question of a questionnaire from the database"
			},
			"response": [
				{
					"name": "OK",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/question/:questionnaireID/:questionID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"question",
								":questionnaireID",
								":questionID"
							],
							"variable": [
								{
									"key": "questionnaireID",
									"value": "<string>",
									"description": "(Required) "
								},
								{
									"key": "questionID",
									"value": "<string>",
									"description": "(Required) "
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"options\": [\n    {\n      \"optID\": \"<string>\",\n      \"opttxt\": \"<string>\",\n      \"nextqID\": \"<string>\"\n    },\n    {\n      \"optID\": \"<string>\",\n      \"opttxt\": \"<string>\",\n      \"nextqID\": \"<string>\"\n    }\n  ],\n  \"questionnaireID\": \"<string>\"\n}"
				},
				{
					"name": "Bad Request",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/question/:questionnaireID/:questionID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"question",
								":questionnaireID",
								":questionID"
							],
							"variable": [
								{
									"key": "questionnaireID",
									"value": "<string>",
									"description": "(Required) "
								},
								{
									"key": "questionID",
									"value": "<string>",
									"description": "(Required) "
								}
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Not Found",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/question/:questionnaireID/:questionID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"question",
								":questionnaireID",
								":questionID"
							],
							"variable": [
								{
									"key": "questionnaireID",
									"value": "<string>",
									"description": "(Required) "
								},
								{
									"key": "questionID",
									"value": "<string>",
									"description": "(Required) "
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Internal Server Error",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/question/:questionnaireID/:questionID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"question",
								":questionnaireID",
								":questionID"
							],
							"variable": [
								{
									"key": "questionnaireID",
									"value": "<string>",
									"description": "(Required) "
								},
								{
									"key": "questionID",
									"value": "<string>",
									"description": "(Required) "
								}
							]
						}
					},
					"status": "Internal Server Error",
					"code": 500,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Get Session Answers",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const dbAvailable = pm.variables.get(\"dbAvailable\");",
							"const shouldSucceed = pm.variables.get(\"shouldSucceed\");",
							"const questionnaireID = pm.variables.get(\"questionnaireID\");",
							"const sessionID = pm.variables.get(\"sessionID\");",
							"pm.variables.unset(\"schema\");",
							"pm.variables.unset(\"shouldSucceed\");",
							"pm.variables.unset(\"questionnaireID\");",
							"pm.variables.unset(\"sessionID\");",
							"pm.variables.unset(\"format\");",
							"",
							"// STATUS CODE",
							"pm.test(`Status code is 200, 404 or 500 (${questionnaireID}, ${sessionID})`, () => {",
							"    pm.response.to.have.status(dbAvailable ? (shouldSucceed ? 200 : 404) : 500);",
							"});",
							"",
							"// BODY is taken care of by collection test script",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const dbAvailable = pm.variables.get(\"dbAvailable\");",
							"const initialized = pm.variables.get(\"initialized\");",
							"if (!initialized) {",
							"    pm.variables.set(\"parameters\", [",
							"        [\"QQ000\", \"SS00\", \"SUC\"], // all valid",
							"        [\"QQ001\", \"SS00\", \"SUC\"], // all valid, skipped questions",
							"        [\"QQ000\", \"INV0\"], // invalid session",
							"        [\"INV00\", \"INV0\", \"FIN\"] // all invalid",
							"    ]);",
							"",
							"    pm.variables.set(\"initialized\", true);",
							"}",
							"",
							"const current = pm.variables.get(\"parameters\").shift();",
							"pm.variables.set(\"questionnaireID\", current[0]);",
							"pm.variables.set(\"sessionID\", current[1]);",
							"pm.variables.set(\"format\", \"json\");",
							"",
							"if (current.at(-1) !== \"FIN\") {",
							"    postman.setNextRequest(\"Get Session Answers\");",
							"}",
							"else {",
							"    pm.variables.unset(\"initialized\");",
							"    pm.variables.unset(\"parameters\");",
							"    postman.setNextRequest(\"Get Question Answers\");",
							"}",
							"",
							"pm.variables.set(\"shouldSucceed\", current.at(-1) === \"SUC\");",
							"pm.variables.set(\"validateSchema\", dbAvailable && pm.variables.get(\"shouldSucceed\"));",
							"pm.variables.set(\"runDefaultErrorTest\", !(dbAvailable && pm.variables.get(\"shouldSucceed\")));",
							"pm.variables.set(\"schema\", {",
							"    \"type\": \"object\",",
							"    \"required\": {",
							"        \"questionnaireID\": true,",
							"        \"session\": true,",
							"        \"answers\": true",
							"    },",
							"    \"properties\": {",
							"        \"questionnaireID\": { \"type\": \"string\" },",
							"        \"session\": { \"type\": \"string\" },",
							"        \"answers\": {",
							"            \"type\": \"array\",",
							"            \"items\": {",
							"                \"type\": \"object\",",
							"                \"required\": {",
							"                    \"qID\": true,",
							"                    \"ans\": true",
							"                },",
							"                \"properties\": {",
							"                    \"qID\": { \"type\": \"string\" },",
							"                    \"ans\": { \"type\": \"string\" },",
							"                }",
							"            }",
							"        }",
							"    }",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/getsessionanswers/:questionnaireID/:sessionID?format={{format}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"getsessionanswers",
						":questionnaireID",
						":sessionID"
					],
					"query": [
						{
							"key": "format",
							"value": "{{format}}"
						}
					],
					"variable": [
						{
							"key": "questionnaireID",
							"value": "{{questionnaireID}}",
							"description": "(Required) "
						},
						{
							"key": "sessionID",
							"value": "{{sessionID}}",
							"description": "(Required) "
						}
					]
				},
				"description": "Get all answers given to a questionnaire in given a session"
			},
			"response": [
				{
					"name": "OK",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/getsessionanswers/:questionnaireID/:sessionID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"getsessionanswers",
								":questionnaireID",
								":sessionID"
							],
							"variable": [
								{
									"key": "questionnaireID",
									"value": "<string>",
									"description": "(Required) "
								},
								{
									"key": "sessionID",
									"value": "<string>",
									"description": "(Required) "
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"questionnaireID\": \"<string>\",\n  \"session\": \"<string>\",\n  \"answers\": [\n    {\n      \"qID\": \"<string>\",\n      \"ans\": \"<string>\"\n    },\n    {\n      \"qID\": \"<string>\",\n      \"ans\": \"<string>\"\n    }\n  ]\n}"
				},
				{
					"name": "Bad Request",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/getsessionanswers/:questionnaireID/:sessionID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"getsessionanswers",
								":questionnaireID",
								":sessionID"
							],
							"variable": [
								{
									"key": "questionnaireID",
									"value": "<string>",
									"description": "(Required) "
								},
								{
									"key": "sessionID",
									"value": "<string>",
									"description": "(Required) "
								}
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Not Found",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/getsessionanswers/:questionnaireID/:sessionID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"getsessionanswers",
								":questionnaireID",
								":sessionID"
							],
							"variable": [
								{
									"key": "questionnaireID",
									"value": "<string>",
									"description": "(Required) "
								},
								{
									"key": "sessionID",
									"value": "<string>",
									"description": "(Required) "
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Internal Server Error",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/getsessionanswers/:questionnaireID/:sessionID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"getsessionanswers",
								":questionnaireID",
								":sessionID"
							],
							"variable": [
								{
									"key": "questionnaireID",
									"value": "<string>",
									"description": "(Required) "
								},
								{
									"key": "sessionID",
									"value": "<string>",
									"description": "(Required) "
								}
							]
						}
					},
					"status": "Internal Server Error",
					"code": 500,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Get Question Answers",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const dbAvailable = pm.variables.get(\"dbAvailable\");",
							"const shouldSucceed = pm.variables.get(\"shouldSucceed\");",
							"const questionnaireID = pm.variables.get(\"questionnaireID\");",
							"const questionID = pm.variables.get(\"questionID\");",
							"pm.variables.unset(\"schema\");",
							"pm.variables.unset(\"shouldSucceed\");",
							"pm.variables.unset(\"questionnaireID\");",
							"pm.variables.unset(\"questionID\");",
							"pm.variables.unset(\"format\");",
							"",
							"// STATUS CODE",
							"pm.test(`Status code is 200, 404 or 500 (${questionnaireID}, ${questionID})`, () => {",
							"    pm.response.to.have.status(dbAvailable ? (shouldSucceed ? 200 : 404) : 500);",
							"});",
							"",
							"// BODY is taken care of by collection test script",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const dbAvailable = pm.variables.get(\"dbAvailable\");",
							"const initialized = pm.variables.get(\"initialized\");",
							"if (!initialized) {",
							"    pm.variables.set(\"parameters\", [",
							"        [\"QQ000\", \"P00\", \"SUC\"], // all valid (open text)",
							"        [\"QQ000\", \"P01\", \"SUC\"], // all valid (multiple choice)",
							"        [\"QQ001\", \"P02\", \"SUC\"], // all valid, skipped question (open text)",
							"        [\"QQ001\", \"Q06\", \"SUC\"], // all valid, skipped question (multiple choice)",
							"        [\"QQ000\", \"INV\"], // invalid question",
							"        [\"INV00\", \"INV\", \"FIN\"] // all invalid ",
							"    ]);",
							"",
							"    pm.variables.set(\"initialized\", true);",
							"}",
							"",
							"const current = pm.variables.get(\"parameters\").shift();",
							"pm.variables.set(\"questionnaireID\", current[0]);",
							"pm.variables.set(\"questionID\", current[1]);",
							"pm.variables.set(\"format\", \"json\");",
							"",
							"if (current.at(-1) !== \"FIN\") {",
							"    postman.setNextRequest(\"Get Question Answers\");",
							"}",
							"else {",
							"    pm.variables.unset(\"initialized\");",
							"    pm.variables.unset(\"parameters\");",
							"    postman.setNextRequest(\"Reset Questionnaire\");",
							"}",
							"",
							"pm.variables.set(\"shouldSucceed\", current.at(-1) === \"SUC\");",
							"pm.variables.set(\"validateSchema\", dbAvailable && pm.variables.get(\"shouldSucceed\"));",
							"pm.variables.set(\"runDefaultErrorTest\", !(dbAvailable && pm.variables.get(\"shouldSucceed\")));",
							"pm.variables.set(\"schema\", {",
							"    \"type\": \"object\",",
							"    \"required\": {",
							"        \"questionnaireID\": true,",
							"        \"questionID\": true,",
							"        \"answers\": true",
							"    },",
							"    \"properties\": {",
							"        \"questionnaireID\": { \"type\": \"string\" },",
							"        \"questionID\": { \"type\": \"string\" },",
							"        \"answers\": {",
							"            \"type\": \"array\",",
							"            \"items\": {",
							"                \"type\": \"object\",",
							"                \"required\": {",
							"                    \"session\": true,",
							"                    \"ans\": true",
							"                },",
							"                \"properties\": {",
							"                    \"session\": { \"type\": \"string\" },",
							"                    \"ans\": { \"type\": \"string\" },",
							"                }",
							"            }",
							"        }",
							"    }",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/getquestionanswers/:questionnaireID/:questionID?format={{format}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"getquestionanswers",
						":questionnaireID",
						":questionID"
					],
					"query": [
						{
							"key": "format",
							"value": "{{format}}"
						}
					],
					"variable": [
						{
							"key": "questionnaireID",
							"value": "{{questionnaireID}}",
							"description": "(Required) "
						},
						{
							"key": "questionID",
							"value": "{{questionID}}",
							"description": "(Required) "
						}
					]
				},
				"description": "Get all answers to a given question of a questionnaire (of every session)"
			},
			"response": [
				{
					"name": "OK",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/getquestionanswers/:questionnaireID/:questionID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"getquestionanswers",
								":questionnaireID",
								":questionID"
							],
							"variable": [
								{
									"key": "questionnaireID",
									"value": "<string>",
									"description": "(Required) "
								},
								{
									"key": "questionID",
									"value": "<string>",
									"description": "(Required) "
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"questionnaireID\": \"<string>\",\n  \"questionID\": \"<string>\",\n  \"answers\": [\n    {\n      \"session\": \"<string>\",\n      \"ans\": \"<string>\"\n    },\n    {\n      \"session\": \"<string>\",\n      \"ans\": \"<string>\"\n    }\n  ]\n}"
				},
				{
					"name": "Bad Request",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/getquestionanswers/:questionnaireID/:questionID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"getquestionanswers",
								":questionnaireID",
								":questionID"
							],
							"variable": [
								{
									"key": "questionnaireID",
									"value": "<string>",
									"description": "(Required) "
								},
								{
									"key": "questionID",
									"value": "<string>",
									"description": "(Required) "
								}
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Not Found",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/getquestionanswers/:questionnaireID/:questionID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"getquestionanswers",
								":questionnaireID",
								":questionID"
							],
							"variable": [
								{
									"key": "questionnaireID",
									"value": "<string>",
									"description": "(Required) "
								},
								{
									"key": "questionID",
									"value": "<string>",
									"description": "(Required) "
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Internal Server Error",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/getquestionanswers/:questionnaireID/:questionID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"getquestionanswers",
								":questionnaireID",
								":questionID"
							],
							"variable": [
								{
									"key": "questionnaireID",
									"value": "<string>",
									"description": "(Required) "
								},
								{
									"key": "questionID",
									"value": "<string>",
									"description": "(Required) "
								}
							]
						}
					},
					"status": "Internal Server Error",
					"code": 500,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// reset the variable to false",
					"pm.variables.set(\"runDefaultErrorTest\", false);",
					"",
					"// db is considered available only if it's not explicitly unavailable",
					"pm.variables.set(\"dbAvailable\", pm.variables.get(\"dbAvailable\") !== false);",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"const dbAvailable = pm.variables.get(\"dbAvailable\") !== false;",
					"const validateSchema = pm.variables.get(\"validateSchema\");",
					"const runDefaultErrorTest = pm.variables.get(\"runDefaultErrorTest\");",
					"",
					"// CONTENT-TYPE",
					"pm.test(\"Content-Type is correct\", () => {",
					"    // 204 means \"No Content\"",
					"    pm.expect(typeof pm.response.headers.get(\"Content-Type\"))",
					"        .to.equal(pm.response.code === 204 ? \"undefined\" : \"string\");",
					"",
					"    if (pm.response.code === 204) return;",
					"",
					"    // status code is not 204",
					"    const format = pm.request.url.query.get(\"format\");",
					"    pm.expect(pm.response.headers.get(\"Content-Type\"))",
					"        .to.contain(format === \"csv\" ? \"text/csv\" : \"application/json\");",
					"});",
					"",
					"// BODY",
					"if (validateSchema) {",
					"    const schema = pm.variables.get(\"schema\"); ",
					"    pm.test(\"Success: Body is not empty\", () => {",
					"        pm.expect(pm.response.text()).to.not.be.empty;",
					"",
					"        pm.test(\"Success: Body is correct\", () => {",
					"            pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
					"        });",
					"    });",
					"}",
					"",
					"if (runDefaultErrorTest) {",
					"    pm.test(\"Error: Body is not empty\", () => {",
					"        pm.expect(pm.response.text()).to.not.be.empty;",
					"",
					"        pm.test(\"Error: Body is correct\", () => {",
					"            const responseJson = pm.response.json();",
					"            pm.expect(responseJson.message).to.be.string;",
					"",
					"            const code = pm.response.code;",
					"            const expectedValue = ",
					"                code === 400 ? \"Bad Request\" : ",
					"                code === 404 ? \"Not Found\" : ",
					"                code === 500 ? \"Internal Server Error\" : undefined;",
					"            pm.expect(responseJson.message).to.equal(expectedValue);",
					"        });        ",
					"    });",
					"}",
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:9103/intelliq_api",
			"type": "string"
		}
	]
}